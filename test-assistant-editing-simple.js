#!/usr/bin/env node

// Simple test script for assistant editing
// Run with: node test-assistant-editing-simple.js

const https = require('https');
const http = require('http');

const API_URL = 'http://localhost:8000';

function makeRequest(url, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(url, options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const json = JSON.parse(body);
          resolve({ status: res.statusCode, data: json });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testAssistantEditing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤...');
    const assistantsResponse = await makeRequest(`${API_URL}/assistants`);
    
    if (assistantsResponse.status !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: ${assistantsResponse.status}`);
    }
    
    const assistants = assistantsResponse.data;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: ${assistants.length}`);
    
    if (assistants.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // 2. –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const assistant = assistants[0];
    console.log(`\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: "${assistant.name}" (ID: ${assistant.id})`);

    // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      name: `–¢–µ—Å—Ç–æ–≤—ã–π ${assistant.name} ${Date.now()}`,
      description: `–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ ${new Date().toLocaleString()}`,
      temperature: '0.9',
      max_tokens: 1500
    };

    console.log('3Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(JSON.stringify(updateData, null, 2));

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    console.log('\n4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    const updateResponse = await makeRequest(
      `${API_URL}/assistants/${assistant.id}`,
      'PUT',
      updateData
    );

    if (updateResponse.status !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateResponse.status} - ${JSON.stringify(updateResponse.data)}`);
    }

    console.log('‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    console.log('\n5Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${updateResponse.data.name}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${updateResponse.data.description}`);
    console.log(`   Temperature: ${updateResponse.data.temperature}`);
    console.log(`   Max tokens: ${updateResponse.data.max_tokens}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateResponse.data.updated_at}`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    const verifyResponse = await makeRequest(`${API_URL}/assistants/${assistant.id}`);
    
    if (verifyResponse.status !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${verifyResponse.status}`);
    }

    const updatedAssistant = verifyResponse.data;
    if (updatedAssistant.name === updateData.name) {
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    } else {
      console.log('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
    }

    console.log('\nüéâ –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://188.225.56.200:3000/settings');
    console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü–æ–º–æ—â–Ω–∏–∫–∏"');
    console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: docker-compose ps');
    console.log('   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend: docker-compose restart backend');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs backend');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAssistantEditing();
